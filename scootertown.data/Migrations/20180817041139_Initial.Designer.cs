// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PDX.PBOT.Scootertown.Data.Concrete;

namespace PDX.PBOT.Scootertown.Data.Migrations
{
    [DbContext(typeof(ScootertownDbContext))]
    [Migration("20180817041139_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", "'postgis', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<byte>("Day");

                    b.Property<short>("DayOfYear");

                    b.Property<string>("HolidayText");

                    b.Property<bool>("IsHoliday");

                    b.Property<bool>("IsWeekend");

                    b.Property<string>("MMYYYY");

                    b.Property<byte>("Month");

                    b.Property<string>("MonthName");

                    b.Property<string>("MonthYear");

                    b.Property<string>("WeekDayName");

                    b.Property<byte>("WeekOfMonth");

                    b.Property<byte>("WeekOfYear");

                    b.Property<byte>("Weekday");

                    b.Property<short>("Year");

                    b.HasKey("Key");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("Calendar","Dim");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.Company", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Company","Dim");

                    b.HasData(
                        new { Key = 1, Name = "Bird" },
                        new { Key = 2, Name = "Lime" },
                        new { Key = 3, Name = "Skip" },
                        new { Key = 4, Name = "CycleHops" }
                    );
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.PaymentType", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentType","Dim");

                    b.HasData(
                        new { Key = 1, Name = "Phone scan" },
                        new { Key = 2, Name = "Phone text" }
                    );
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.PlacementReason", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlacementReason","Dim");

                    b.HasData(
                        new { Key = 1, Name = "User" },
                        new { Key = 2, Name = "Rebalancing" }
                    );
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.RemovalReason", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RemovalReason","Dim");

                    b.HasData(
                        new { Key = 1, Name = "User" },
                        new { Key = 2, Name = "Rebalancing" },
                        new { Key = 3, Name = "Out of service area" },
                        new { Key = 4, Name = "Maintenance" }
                    );
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.Vehicle", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CompanyKey");

                    b.Property<string>("Name");

                    b.Property<bool>("Registered");

                    b.Property<int?>("TypeKey");

                    b.HasKey("Key");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeKey");

                    b.ToTable("Vehicle","Dim");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.VehicleType", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VehicleType","Dim");

                    b.HasData(
                        new { Key = 1, Name = "Electric scooter" },
                        new { Key = 2, Name = "Electric bicycle" },
                        new { Key = 3, Name = "Scooter" },
                        new { Key = 4, Name = "Bicycle" },
                        new { Key = 5, Name = "None-Pedestrian" },
                        new { Key = 6, Name = "Motor vehicle" },
                        new { Key = 7, Name = "AV Motor vehicle" },
                        new { Key = 8, Name = "TNC Private-for-hire vehicle" },
                        new { Key = 9, Name = "AV Private-for-hire vehicle" },
                        new { Key = 10, Name = "Taxi" },
                        new { Key = 11, Name = "Pedicab" },
                        new { Key = 12, Name = "Bus" },
                        new { Key = 13, Name = "Motorcycle" },
                        new { Key = 14, Name = "Personal Assisted Mobility Device" },
                        new { Key = 15, Name = "Private or public agency transit vehicle" },
                        new { Key = 16, Name = "Other" }
                    );
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Collision", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CalendarKey");

                    b.HasKey("Key");

                    b.HasIndex("CalendarKey");

                    b.ToTable("Collision","Fact");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Complaint", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CalendarKey");

                    b.HasKey("Key");

                    b.HasIndex("CalendarKey");

                    b.ToTable("Complaint","Fact");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Deployment", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowedPlacement");

                    b.Property<string>("AlternateKey")
                        .HasMaxLength(30);

                    b.Property<byte>("BatteryLevel");

                    b.Property<int>("CompanyKey");

                    b.Property<bool>("Disabled");

                    b.Property<int>("EndDateKey");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("FirstSeen");

                    b.Property<bool>("InEastPortland");

                    b.Property<DateTime>("LastSeen");

                    b.Property<Point>("Location");

                    b.Property<int>("PickupReasonKey");

                    b.Property<int>("PlacementReasonKey");

                    b.Property<bool>("Reserved");

                    b.Property<int>("StartDateKey");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("VehicleKey");

                    b.Property<int>("VehicleTypeKey");

                    b.HasKey("Key");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("EndDateKey");

                    b.HasIndex("PickupReasonKey");

                    b.HasIndex("PlacementReasonKey");

                    b.HasIndex("StartDateKey");

                    b.HasIndex("VehicleTypeKey");

                    b.HasIndex("VehicleKey", "StartDateKey", "StartTime")
                        .IsUnique();

                    b.ToTable("Deployment","Fact");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Trip", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Accuracy");

                    b.Property<int>("ActualCost");

                    b.Property<string>("AlternateKey")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte>("AverageSpeed");

                    b.Property<int>("CompanyKey");

                    b.Property<int>("Distance");

                    b.Property<int>("Duration");

                    b.Property<int>("EndDateKey");

                    b.Property<Point>("EndPoint");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<byte>("MaxSpeed");

                    b.Property<string>("ParkingVerification");

                    b.Property<int>("PaymentAccessKey");

                    b.Property<int>("PaymentTypeKey");

                    b.Property<LineString>("Route");

                    b.Property<short>("SampleRate");

                    b.Property<int>("StandardCost");

                    b.Property<int>("StartDateKey");

                    b.Property<Point>("StartPoint");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("VehicleKey");

                    b.Property<int>("VehicleTypeKey");

                    b.HasKey("Key");

                    b.HasIndex("AlternateKey")
                        .IsUnique();

                    b.HasIndex("CompanyKey");

                    b.HasIndex("EndDateKey");

                    b.HasIndex("PaymentAccessKey");

                    b.HasIndex("PaymentTypeKey");

                    b.HasIndex("StartDateKey");

                    b.HasIndex("VehicleTypeKey");

                    b.HasIndex("VehicleKey", "StartDateKey", "StartTime")
                        .IsUnique();

                    b.ToTable("Trip","Fact");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Dimensions.Vehicle", b =>
                {
                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Company", "Company")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyKey");

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.VehicleType", "Type")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeKey");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Collision", b =>
                {
                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar")
                        .WithMany("Collisions")
                        .HasForeignKey("CalendarKey");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Complaint", b =>
                {
                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar")
                        .WithMany("Complaints")
                        .HasForeignKey("CalendarKey");
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Deployment", b =>
                {
                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Company", "Company")
                        .WithMany("Deployments")
                        .HasForeignKey("CompanyKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar", "EndDate")
                        .WithMany("DeploymentsEnded")
                        .HasForeignKey("EndDateKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.RemovalReason", "PickupReason")
                        .WithMany("Deployments")
                        .HasForeignKey("PickupReasonKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.PlacementReason", "PlacementReason")
                        .WithMany("Deployments")
                        .HasForeignKey("PlacementReasonKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar", "StartDate")
                        .WithMany("DeploymentsStarted")
                        .HasForeignKey("StartDateKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Vehicle", "Vehicle")
                        .WithMany("Deployments")
                        .HasForeignKey("VehicleKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.VehicleType", "VehicleType")
                        .WithMany("Deployments")
                        .HasForeignKey("VehicleTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PDX.PBOT.Scootertown.Data.Models.Facts.Trip", b =>
                {
                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Company", "Company")
                        .WithMany("Trips")
                        .HasForeignKey("CompanyKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar", "EndDate")
                        .WithMany("TripsEnded")
                        .HasForeignKey("EndDateKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.PaymentType", "PaymentAccess")
                        .WithMany("TripsPayAccess")
                        .HasForeignKey("PaymentAccessKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.PaymentType", "PaymentType")
                        .WithMany("TripsPayType")
                        .HasForeignKey("PaymentTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Calendar", "StartDate")
                        .WithMany("TripsStarted")
                        .HasForeignKey("StartDateKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PDX.PBOT.Scootertown.Data.Models.Dimensions.VehicleType", "VehicleType")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
